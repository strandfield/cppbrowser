// This file was generated by cppscanner.
// All modifications will be lost.

const databaseSchemaVersion = 0;

const symbolKinds = {
  names: [
    "<unknown>",
    "module",
    "namespace",
    "inline-namespace",
    "namespace-alias",
    "macro",
    "enum",
    "enum-class",
    "struct",
    "class",
    "union",
    "lambda",
    "typedef",
    "type-alias",
    "enum-constant",
    "variable",
    "field",
    "static-property",
    "function",
    "method",
    "static-method",
    "constructor",
    "destructor",
    "operator",
    "conversion-function",
    "using",
    "parameter",
    "template-type-parameter",
    "template-template-parameter",
    "non-type-template-parameter",
    "concept",
    "label"
  ],
  values: {
    "<unknown>": 0,
    "module": 1,
    "namespace": 2,
    "inline-namespace": 3,
    "namespace-alias": 4,
    "macro": 5,
    "enum": 6,
    "enum-class": 7,
    "struct": 8,
    "class": 9,
    "union": 10,
    "lambda": 11,
    "typedef": 12,
    "type-alias": 13,
    "enum-constant": 14,
    "variable": 15,
    "field": 16,
    "static-property": 17,
    "function": 18,
    "method": 19,
    "static-method": 20,
    "constructor": 21,
    "destructor": 22,
    "operator": 23,
    "conversion-function": 24,
    "using": 25,
    "parameter": 26,
    "template-type-parameter": 27,
    "template-template-parameter": 28,
    "non-type-template-parameter": 29,
    "concept": 30,
    "label": 31
  }
};

function getSymbolKindByName(name) {
  return symbolKinds.values[name];
}
function getSymbolKindValue(nameOrValue) {
  return Number.isInteger(nameOrValue) ? nameOrValue : getSymbolKindByName(nameOrValue);
}
function symbol_isMacro(sym) { 
  let k = Number.isInteger(sym.kind) ? sym.kind : symbolKinds.values[sym.kind];
  return k == 5; 
}
function symbol_isNamespace(sym) {
  let k = Number.isInteger(sym.kind) ? sym.kind : symbolKinds.values[sym.kind];
  return k == 2 || k == 3; 
}
function symbol_isVarLike(sym) {
  let k = Number.isInteger(sym.kind) ? sym.kind : symbolKinds.values[sym.kind];
  return k == 15 || k == 16 || k == 17; 
}
function symbol_isFunctionLike(sym) {
  let k = Number.isInteger(sym.kind) ? sym.kind : symbolKinds.values[sym.kind];
  return k == 18 || k == 19 || k == 20 || k == 21 || k == 22 || k == 23 || k == 24; 
}

function symbol_isLocal(sym) { 
  return (sym.flags & 1) != 0; 
}
function symbol_isFromProject(sym) { 
  return (sym.flags & 2) != 0; 
}
function symbol_isProtected(sym) { 
  return (sym.flags & 4) != 0; 
}
function symbol_isPrivate(sym) { 
  return (sym.flags & 8) != 0; 
}

function macro_isUsedAsHeaderGuard(sym) { 
  return (sym.flags & 32) != 0; 
}
function macro_isFunctionLike(sym) { 
  return (sym.flags & 64) != 0; 
}

function variable_isConst(sym) { 
  return (sym.flags & 32) != 0; 
}
function symbol_isConstexpr(sym) { 
  return (sym.flags & 64) != 0; 
}
function symbol_isStatic(sym) { 
  return (sym.flags & 128) != 0; 
}
function symbol_isMutable(sym) { 
  return (sym.flags & 256) != 0; 
}
function symbol_isThreadLocal(sym) { 
  return (sym.flags & 512) != 0; 
}
function symbol_isInline(sym) { 
  return (sym.flags & 1024) != 0; 
}

function function_isInline(sym) { 
  return (sym.flags & 32) != 0; 
}
function function_isStatic(sym) { 
  return (sym.flags & 64) != 0; 
}
function function_isConstexpr(sym) { 
  return (sym.flags & 128) != 0; 
}
function function_isConsteval(sym) { 
  return (sym.flags & 256) != 0; 
}
function function_isNoexcept(sym) { 
  return (sym.flags & 512) != 0; 
}
function function_isDefault(sym) { 
  return (sym.flags & 1024) != 0; 
}
function function_isDelete(sym) { 
  return (sym.flags & 2048) != 0; 
}
function function_isConst(sym) { 
  return (sym.flags & 4096) != 0; 
}
function function_isVirtual(sym) { 
  return (sym.flags & 8192) != 0; 
}
function function_isPure(sym) { 
  return (sym.flags & 16384) != 0; 
}
function function_isOverride(sym) { 
  return (sym.flags & 32768) != 0; 
}
function function_isFinal(sym) { 
  return (sym.flags & 65536) != 0; 
}
function function_isExplicit(sym) { 
  return (sym.flags & 131072) != 0; 
}

function class_isFinal(sym) { 
  return (sym.flags & 32) != 0; 
}

function symbolReference_isDef(symRef) { 
  return (symRef.flags & 2) != 0; 
}
function symbolReference_isDecl(symRef) { 
  return (symRef.flags & 1) != 0; 
}
function symbolReference_isRead(symRef) { 
  return (symRef.flags & 4) != 0; 
}
function symbolReference_isWrite(symRef) { 
  return (symRef.flags & 8) != 0; 
}
function symbolReference_isCall(symRef) { 
  return (symRef.flags & 16) != 0; 
}
function symbolReference_isDynamic(symRef) { 
  return (symRef.flags & 32) != 0; 
}
function symbolReference_isAddressOf(symRef) { 
  return (symRef.flags & 64) != 0; 
}
function symbolReference_isImplicit(symRef) { 
  return (symRef.flags & 128) != 0; 
}
function symbolReference_isRef(symRef) {
  return !symbolReference_isDef(symRef) && !symbolReference_isDecl(symRef);
}

module.exports = {
  databaseSchemaVersion,
  symbolKinds,
  getSymbolKindByName,
  getSymbolKindValue,
  symbol_isMacro,
  symbol_isNamespace,
  symbol_isVarLike,
  symbol_isFunctionLike,
  symbol_isLocal,
  symbol_isFromProject,
  symbol_isProtected,
  symbol_isPrivate,
  macro_isUsedAsHeaderGuard,
  macro_isFunctionLike,
  variable_isConst,
  symbol_isConstexpr,
  symbol_isStatic,
  symbol_isMutable,
  symbol_isThreadLocal,
  symbol_isInline,
  function_isInline,
  function_isStatic,
  function_isConstexpr,
  function_isConsteval,
  function_isNoexcept,
  function_isDefault,
  function_isDelete,
  function_isConst,
  function_isVirtual,
  function_isPure,
  function_isOverride,
  function_isFinal,
  function_isExplicit,
  class_isFinal,
  symbolReference_isDef,
  symbolReference_isDecl,
  symbolReference_isRead,
  symbolReference_isWrite,
  symbolReference_isCall,
  symbolReference_isDynamic,
  symbolReference_isAddressOf,
  symbolReference_isImplicit,
  symbolReference_isRef
};